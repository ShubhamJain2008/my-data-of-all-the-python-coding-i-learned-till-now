import random #for random numbers 
import sys #comand used to make user to able to exit game
import pygame 
from pygame.locals import *     #for basic py imports

#global variables for game
FPS = 32
WIDTH = 289
HEIGHT = 511
SCREEN = pygame.display.set_mode((WIDTH,HEIGHT))
BaseORDINATE = HEIGHT * 0.8 
GAME_SPRITES = {}
GAME_SOUNDS ={}
PLAYER = 'sprites/bird.png'
BACKGROUND = 'sprites/background.png'
PIPE = 'images/pipe.png'
def welcomeScreen():
    """
    Shows welcome images on the screen
    """

    playerx = int(WIDTH/5)
    playery = int((HEIGHT - GAME_SPRITES['player'].get_height())/2)
    Welcomex = int((WIDTH - GAME_SPRITES['Welcome'].get_width())/2)
    Welcomey = int(HEIGHT*0.13)
    basex = 0
    while True:
        for event in pygame.event.get():
            # if user clicks on cross button, close the game
            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):
                pygame.quit()
                sys.exit()

            # If the user presses space or up key, start the game for them
            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):
                return
            else:
                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    
                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    
                SCREEN.blit(GAME_SPRITES['Welcome'], (Welcomex, Welcomey ))    
                SCREEN.blit(GAME_SPRITES['base'], (basex, BaseORDINATE))    
                pygame.display.update()
                FPSCLOCK.tick(FPS)

def mainGame():
    score = 0
    playerx = int(WIDTH/5)
    playery = int(WIDTH/2)
    basex = 0

    # Create 2 pipes for blitting on the screen
    newPipe1 = getRandomPipe()
    newPipe2 = getRandomPipe()

    # my List of upper pipes
    upperPipes = [
        {'x': WIDTH+200, 'y':newPipe1[0]['y']},
        {'x': WIDTH+200+(WIDTH/2), 'y':newPipe2[0]['y']},
    ]
    # my List of lower pipes
    lowerPipes = [
        {'x': WIDTH+200, 'y':newPipe1[1]['y']},
        {'x': WIDTH+200+(WIDTH/2), 'y':newPipe2[1]['y']},
    ]

    pipeVelX = -4

    playerVelY = -9
    playerMaxVelY = 10
    playerMinVelY = -8
    playerAccY = 1

    playerFlapAccv = -8 # velocity while flapping
    playerFlapped = False # It is true only when the bird is flapping


    while True:
        for event in pygame.event.get():
            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                pygame.quit()
                sys.exit()
            if event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):
                if playery > 0:
                    playerVelY = playerFlapAccv
                    playerFlapped = True
                    GAME_SOUNDS['wing'].play()


        crashTest = isCollide(playerx, playery, upperPipes, lowerPipes) # This function will return true if the player is crashed
        if crashTest:
            return     

        #check for score
        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2
        for pipe in upperPipes:
            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2
            if pipeMidPos<= playerMidPos < pipeMidPos +4:
                score +=1
                print(f"Your score is {score}") 
                GAME_SOUNDS['point'].play()


        if playerVelY <playerMaxVelY and not playerFlapped:
            playerVelY += playerAccY

        if playerFlapped:
            playerFlapped = False            
        playerHeight = GAME_SPRITES['player'].get_height()
        playery = playery + min(playerVelY, BaseORDINATE  - playery - playerHeight)

        # move pipes to the left
        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):
            upperPipe['x'] += pipeVelX
            lowerPipe['x'] += pipeVelX

        # Add a new pipe when the first is about to cross the leftmost part of the screen
        if 0<upperPipes[0]['x']<5:
            newpipe = getRandomPipe()
            upperPipes.append(newpipe[0])
            lowerPipes.append(newpipe[1])

        # if the pipe is out of the screen, remove it
        if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():
            upperPipes.pop(0)
            lowerPipes.pop(0)
        
        # Lets blit our sprites now
        SCREEN.blit(GAME_SPRITES['background'], (0, 0))
        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):
            SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))
            SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))

        SCREEN.blit(GAME_SPRITES['base'], (basex, BaseORDINATE))
        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))
        myDigits = [int(x) for x in list(str(score))]
        width = 0
        for digit in myDigits:
            width += GAME_SPRITES['numbers'][digit].get_width()
        Xoffset = (WIDTH - width)/2

        for digit in myDigits:
            SCREEN.blit(GAME_SPRITES['numbers'][digit], (Xoffset, HEIGHT*0.12))
            Xoffset += GAME_SPRITES['numbers'][digit].get_width()
        pygame.display.update()
        FPSCLOCK.tick(FPS)

def isCollide(playerx, playery, upperPipes, lowerPipes):
    if playery> BaseORDINATE - 25  or playery<0:
        GAME_SOUNDS['hit'].play()
        return True
    
    for pipe in upperPipes:
        pipeHeight = GAME_SPRITES['pipe'][0].get_height()
        if(playery < pipeHeight + pipe['y'] and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width()):
            GAME_SOUNDS['hit'].play()
            return True

    for pipe in lowerPipes:
        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():
            GAME_SOUNDS['hit'].play()
            return True

    return False

def getRandomPipe():
    """
    Generate positions of two pipes(one bottom straight and one top rotated ) for blitting on the screen
    """
    pipeHeight = GAME_SPRITES['pipe'][0].get_height()
    offset = HEIGHT/3
    y2 = offset + random.randrange(0, int(HEIGHT - GAME_SPRITES['base'].get_height()  - 1.2 *offset))
    pipeX = WIDTH + 10
    y1 = pipeHeight - y2 + offset
    pipe = [
        {'x': pipeX, 'y': -y1}, #upper Pipe
        {'x': pipeX, 'y': y2} #lower Pipe
    ]
    return pipe








#This is our main point from where game wil start
if __name__ == "__main__":
  pygame.init() #Initialize all pygame modules
FPSCLOCK = pygame.time.Clock()
pygame.display.set_caption('Flappy bird by Shubham')
GAME_SPRITES['numbers'] = (
    pygame.image.load('sprites/0.png').convert_alpha(),
    pygame.image.load('sprites/1.png').convert_alpha(),
    pygame.image.load('sprites/2.png').convert_alpha(),
    pygame.image.load('sprites/3.png').convert_alpha(),
    pygame.image.load('sprites/4.png').convert_alpha(),
    pygame.image.load('sprites/5.png').convert_alpha(),
    pygame.image.load('sprites/6.png').convert_alpha(),
    pygame.image.load('sprites/7.png').convert_alpha(),
    pygame.image.load('sprites/8.png').convert_alpha(),
    pygame.image.load('sprites/9.png').convert_alpha(),
 )    
#Game image loading cmds
GAME_SPRITES['Welcome'] =pygame.image.load('images/wecome screen.png').convert_alpha()
GAME_SPRITES['base'] =pygame.image.load('sprites/base.png').convert_alpha()
GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), 
pygame.image.load(PIPE).convert_alpha()
)
GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()
GAME_SPRITES['background'] =pygame.image.load(BACKGROUND).convert()

#game sounds
GAME_SOUNDS['die'] = pygame.mixer.Sound('audio/Game Over.mp3.mp3')
GAME_SOUNDS['hit'] = pygame.mixer.Sound('audio/hit.mp3')
GAME_SOUNDS['point'] = pygame.mixer.Sound('audio/point.mp3')
GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('audio/swoosh.mp3')
GAME_SOUNDS['wing'] = pygame.mixer.Sound('audio/wing.mp3')
GAME_SOUNDS['Theme song'] = pygame.mixer.Sound('audio/Flappy Bird Theme Song.mp3')

while True:
  welcomeScreen()
  maingame()
  
  
  
  
